import OpenAI from "openai";

const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || "default_key" 
});

// DeepSeek API configuration
const DEEPSEEK_API_URL = "https://api.deepseek.com/chat/completions";
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;

async function summarizeWithDeepSeek(text: string): Promise<string> {
  if (!DEEPSEEK_API_KEY) {
    throw new Error("DeepSeek API key not configured");
  }

  const response = await fetch(DEEPSEEK_API_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${DEEPSEEK_API_KEY}`,
    },
    body: JSON.stringify({
      model: "deepseek-chat",
      messages: [
        {
          role: "system",
          content: "Eres un asistente experto en resumir documentos. Proporciona resúmenes concisos pero completos que mantengan los puntos clave e información importante."
        },
        {
          role: "user",
          content: `Por favor, proporciona un resumen conciso del siguiente documento manteniendo los puntos clave e información importante:\n\n${text}`
        }
      ],
      max_tokens: 500,
      temperature: 0.3,
    }),
  });

  if (!response.ok) {
    throw new Error(`DeepSeek API error: ${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  const summary = data.choices?.[0]?.message?.content;

  if (!summary) {
    throw new Error("No summary generated by DeepSeek");
  }

  return summary;
}

// Función de resumen local sin costo
function createLocalSummary(text: string): string {
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);

  if (sentences.length === 0) {
    return "No se pudo generar un resumen del documento.";
  }

  // Tomar las primeras oraciones más importantes
  const maxSentences = Math.min(sentences.length, 5);
  let summary = "";

  for (let i = 0; i < maxSentences; i++) {
    const sentence = sentences[i].trim();
    if (sentence.length > 20) {
      summary += sentence + ". ";
    }
  }

  // Si el resumen es muy corto, agregar más contexto
  if (summary.length < 100 && sentences.length > maxSentences) {
    for (let i = maxSentences; i < Math.min(sentences.length, 8); i++) {
      const sentence = sentences[i].trim();
      if (sentence.length > 15) {
        summary += sentence + ". ";
      }
    }
  }

  return summary.trim() || "Documento procesado. Contenido disponible en la sección de texto extraído.";
}

export async function summarizeDocument(text: string): Promise<string> {
  if (!text || text.trim().length === 0) {
    throw new Error("No text provided for summarization");
  }

  // Try DeepSeek first (if available)
  try {
    if (DEEPSEEK_API_KEY) {
      console.log("Using DeepSeek API for summarization");
      return await summarizeWithDeepSeek(text);
    }
  } catch (error: any) {
    console.log("DeepSeek failed, using local summarization:", error.message);
  }

  // Try OpenAI if available
  try {
    if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== "default_key") {
      const prompt = `Please provide a concise summary of the following document while maintaining key points and important information:\n\n${text}`;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 500,
        temperature: 0.3,
      });

      const summary = response.choices[0].message.content;
      if (summary) {
        return summary;
      }
    }
  } catch (error: any) {
    console.log("OpenAI failed, using local summarization:", error.message);
  }

  // Fallback to local summarization (always free)
  console.log("Using local text summarization");
  return createLocalSummary(text);
}

export async function analyzeDocumentStructure(text: string): Promise<{
  type: string;
  hasTable: boolean;
  language: string;
  wordCount: number;
}> {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "You are a document analysis expert. Analyze the document structure and provide a JSON response with the document type, whether it contains tables, the primary language, and word count."
        },
        {
          role: "user",
          content: `Analyze this document and respond with JSON in this exact format: { "type": "document type", "hasTable": boolean, "language": "language code", "wordCount": number }\n\nDocument text:\n${text.substring(0, 2000)}`
        },
      ],
      response_format: { type: "json_object" },
      max_tokens: 200,
    });

    const result = JSON.parse(response.choices[0].message.content || "{}");

    return {
      type: result.type || "unknown",
      hasTable: result.hasTable || false,
      language: result.language || "unknown",
      wordCount: result.wordCount || text.split(/\s+/).length,
    };
  } catch (error: any) {
    console.error("Document analysis error:", error);
    return {
      type: "unknown",
      hasTable: false,
      language: "unknown",
      wordCount: text.split(/\s+/).length,
    };
  }
}